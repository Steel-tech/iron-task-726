# .github/workflows/web-deploy.yml  
# Dedicated web deployment workflow for Vercel
# Focuses on Next.js building, optimization, and Vercel deployment

name: Web Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'web/**'
      - '.github/workflows/web-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - preview
        - production

env:
  NODE_VERSION: '18'

jobs:
  # Web-specific testing and building
  web-test:
    name: Web Tests & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install dependencies
      run: |
        cd web
        npm ci
        
    - name: Run ESLint
      run: |
        cd web
        npm run lint
        
    - name: Run TypeScript checking
      run: |
        cd web
        npm run typecheck
        
    - name: Run tests with coverage
      run: |
        cd web
        npm run test:ci
        
    - name: Build Next.js application
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      run: |
        cd web
        npm run build
        
    - name: Run security audit
      run: |
        cd web
        npm run security:audit
        
    - name: Bundle analysis (on main branch)
      if: github.ref == 'refs/heads/main'
      env:
        NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
        NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
        NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
      run: |
        cd web
        npm run build:analyze
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: web/coverage/lcov.info
        flags: web
        name: web-coverage
        
    - name: Store build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: web-build
        path: web/.next/
        retention-days: 1

  # Deploy to Vercel
  deploy:
    name: Deploy to Vercel
    needs: web-test
    runs-on: ubuntu-latest
    
    environment:
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ secrets.WEB_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install Vercel CLI
      run: npm install -g vercel@latest
      
    - name: Pull Vercel environment information
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd web
        vercel pull --yes --environment=${{ github.event.inputs.environment || 'production' }} --token=$VERCEL_TOKEN
        
    - name: Build project artifacts
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd web
        vercel build ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=$VERCEL_TOKEN
        
    - name: Deploy to Vercel
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        cd web
        vercel deploy --prebuilt ${{ github.event.inputs.environment == 'production' && '--prod' || '' }} --token=$VERCEL_TOKEN
        
    - name: Wait for deployment
      run: sleep 30
      
    - name: Health check
      run: |
        for i in {1..10}; do
          if curl -f ${{ secrets.WEB_URL }}; then
            echo "✅ Web health check passed"
            exit 0
          fi
          echo "⏳ Waiting for deployment... (attempt $i/10)"
          sleep 15
        done
        echo "❌ Web health check failed after 10 attempts"
        exit 1

  # Performance and accessibility testing
  lighthouse:
    name: Lighthouse Performance Test
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'production' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          ${{ secrets.WEB_URL }}
          ${{ secrets.WEB_URL }}/login
        configPath: './web/lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
        
    - name: Upload Lighthouse results
      uses: actions/upload-artifact@v4
      with:
        name: lighthouse-results
        path: .lighthouseci/

  # E2E testing with Playwright
  e2e-test:
    name: End-to-End Testing
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Playwright
      run: |
        npm install -g playwright
        playwright install chromium
        
    - name: Run E2E tests
      env:
        BASE_URL: ${{ secrets.WEB_URL }}
        API_URL: ${{ secrets.API_URL }}
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}
      run: |
        cd tests/playwright-tests
        npx playwright test
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-results
        path: tests/playwright-tests/test-results/