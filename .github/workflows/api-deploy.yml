# .github/workflows/api-deploy.yml
# Dedicated API deployment workflow for Railway
# Focused on API testing, database migrations, and Railway deployment

name: API Deployment

on:
  push:
    branches: [ main ]
    paths:
      - 'api/**'
      - '.github/workflows/api-deploy.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  # API-specific testing and validation
  api-test:
    name: API Tests & Validation
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: iron_task_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
        
    - name: Install dependencies
      run: |
        cd api
        npm ci
        
    - name: Generate Prisma client
      run: |
        cd api
        npx prisma generate
        
    - name: Setup test database
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/iron_task_test
      run: |
        cd api
        npx prisma migrate deploy
        npx prisma db seed
        
    - name: Run API tests
      env:
        DATABASE_URL: postgresql://test:test@localhost:5432/iron_task_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret-key-for-testing-only-32-chars
        COOKIE_SECRET: test-cookie-secret-key-for-testing-32
        NODE_ENV: test
      run: |
        cd api
        npm run test:ci
        
    - name: Run security audit
      run: |
        cd api
        npm run security:audit
        
    - name: Upload test coverage
      uses: codecov/codecov-action@v3
      with:
        file: api/coverage/lcov.info
        flags: api
        name: api-coverage

  # Deploy to Railway
  deploy:
    name: Deploy to Railway
    needs: api-test
    runs-on: ubuntu-latest
    
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ secrets.API_URL }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: api/package-lock.json
        
    - name: Install dependencies
      run: |
        cd api
        npm ci --production
        
    - name: Generate Prisma client
      run: |
        cd api
        npx prisma generate
        
    - name: Run database migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        cd api
        npx prisma migrate deploy
        
    - name: Install Railway CLI
      run: npm install -g @railway/cli
      
    - name: Deploy to Railway
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        cd api
        railway deploy --service ${{ secrets.RAILWAY_SERVICE_ID }}
        
    - name: Wait for deployment
      run: sleep 60
      
    - name: Health check
      run: |
        for i in {1..10}; do
          if curl -f ${{ secrets.API_URL }}/api/health; then
            echo "‚úÖ Health check passed"
            exit 0
          fi
          echo "‚è≥ Waiting for deployment... (attempt $i/10)"
          sleep 30
        done
        echo "‚ùå Health check failed after 10 attempts"
        exit 1
        
    - name: Test critical endpoints
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        echo "Testing critical API endpoints..."
        
        # Test health endpoint
        curl -f $API_URL/api/health
        
        # Test API documentation
        curl -f $API_URL/api/docs
        
        # Test CORS preflight
        curl -X OPTIONS -H "Origin: ${{ secrets.WEB_URL }}" \
             -H "Access-Control-Request-Method: GET" \
             -H "Access-Control-Request-Headers: Authorization" \
             $API_URL/api/health
        
        echo "‚úÖ All critical endpoints responding"

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    needs: deploy
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: Install Railway CLI
      run: npm install -g @railway/cli
      
    - name: Rollback deployment
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      run: |
        echo "üîÑ Rolling back failed deployment..."
        railway rollback --service ${{ secrets.RAILWAY_SERVICE_ID }}
        
    - name: Notify rollback
      run: |
        echo "‚ö†Ô∏è Deployment failed and was rolled back"
        echo "Check the logs and fix issues before trying again"