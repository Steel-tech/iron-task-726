generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                    String                 @id @default(uuid())
  name                  String                 @unique
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  labels                Label[]
  performanceBenchmarks PerformanceBenchmark[]
  projects              Project[]
  reportTemplates       ReportTemplate[]
  savedFilters          SavedFilter[]
  tags                  Tag[]
  trainingCourses       TrainingCourse[]
  users                 User[]
  vendors               Vendor[]
}

model User {
  id                     String                @id @default(uuid())
  email                  String                @unique
  password               String
  name                   String
  role                   UserRole
  companyId              String
  unionMember            Boolean               @default(false)
  phoneNumber            String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt
  aiReports              AIReport[]
  activities             Activity[]
  annotations            Annotation[]
  checklistSubmissions   ChecklistSubmission[]
  comments               Comment[]
  feedEvents             FeedEvent[]
  feedPreferences        FeedPreferences?
  formsData              FormsData[]
  galleries              Gallery[]
  createdLabels          Label[]
  receivedDeliveries     MaterialDelivery[]
  taggedMedia            MediaTag[]
  mediaViews             MediaView[]
  notifications          Notification[]
  ppeDetections          PPEDetection[]
  assignedLabels         ProjectLabel[]
  projectMembers         ProjectMember[]
  assignedPunchItems     PunchListItem[]       @relation("PunchListAssignee")
  createdPunchItems      PunchListItem[]       @relation("PunchListCreator")
  verifiedPunchItems     PunchListItem[]       @relation("PunchListVerifier")
  pushSubscriptions      PushSubscription[]
  assignedDefects        QualityDefect[]       @relation("DefectAssignee")
  discoveredDefects      QualityDefect[]       @relation("DefectDiscoverer")
  verifiedDefects        QualityDefect[]       @relation("DefectVerifier")
  approvedInspections    QualityInspection[]   @relation("InspectionApprover")
  assignedInspections    QualityInspection[]   @relation("InspectionAssigner")
  qualityInspections     QualityInspection[]   @relation("QualityInspector")
  reactions              Reaction[]
  refreshTokens          RefreshToken[]
  reportShares           ReportShare[]
  safetyActions          SafetyAction[]
  assignedIncidents      SafetyIncident[]      @relation("AssignedIncidents")
  reportedIncidents      SafetyIncident[]      @relation("ReportedIncidents")
  savedFilters           SavedFilter[]
  starredProjects        StarredProject[]
  starredByUsers         StarredUser[]         @relation("StarredUser")
  starringUsers          StarredUser[]         @relation("StarringUser")
  createdTags            Tag[]
  teamChats              TeamChat[]
  trainingEnrollments    TrainingEnrollment[]
  trainingRecords        TrainingRecord[]
  verifiedCertifications TrainingRecord[]      @relation("CertificationVerifier")
  company                Company               @relation(fields: [companyId], references: [id])
  media                  Media[]
}

model Project {
  id                 String              @id @default(uuid())
  jobNumber          String              @unique
  name               String
  location           String
  address            String?
  status             ProjectStatus       @default(ACTIVE)
  companyId          String
  metadata           Json?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  aiReports          AIReport[]
  activities         Activity[]
  feedEvents         FeedEvent[]
  formsData          FormsData[]
  galleries          Gallery[]
  materialDeliveries MaterialDelivery[]
  company            Company             @relation(fields: [companyId], references: [id])
  labels             ProjectLabel[]
  members            ProjectMember[]
  projectMetrics     ProjectMetrics[]
  timeline           ProjectTimeline?
  punchListItems     PunchListItem[]
  qualityInspections QualityInspection[]
  safetyChecklists   SafetyChecklist[]
  safetyIncidents    SafetyIncident[]
  starredBy          StarredProject[]
  teamChats          TeamChat[]
  media              Media[]
}

model ProjectMember {
  projectId  String
  userId     String
  role       String?
  assignedAt DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
  @@index([userId])
}

model Media {
  id                 String         @id @default(uuid())
  projectId          String
  userId             String
  fileUrl            String
  thumbnailUrl       String?
  mediaType          MediaType
  fileSize           Int
  width              Int?
  height             Int?
  duration           Int?
  latitude           Float?
  longitude          Float?
  address            String?
  tags               String[]
  timestamp          DateTime       @default(now())
  activityType       ActivityType
  location           String?
  notes              String?
  metadata           Json?
  isPictureInPicture Boolean        @default(false)
  frontCameraUrl     String?
  backCameraUrl      String?
  status             MediaStatus    @default(PROCESSING)
  processedAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  annotations        Annotation[]
  comments           Comment[]
  galleryItems       GalleryItem[]
  mediaTags          MediaTag[]
  views              MediaView[]
  ppeDetections      PPEDetection[]
  project            Project        @relation(fields: [projectId], references: [id])
  user               User           @relation(fields: [userId], references: [id])

  @@index([projectId, timestamp])
  @@index([userId])
  @@index([activityType])
  @@index([status])
  @@map("media")
}

model MediaView {
  id       String   @id @default(uuid())
  mediaId  String
  userId   String
  viewedAt DateTime @default(now())
  media    Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([mediaId, userId])
  @@index([mediaId])
  @@index([userId])
}

model Annotation {
  id        String   @id @default(uuid())
  mediaId   String
  userId    String
  data      Json
  createdAt DateTime @default(now())
  media     Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@index([mediaId])
  @@index([userId])
}

model Activity {
  id          String       @id @default(uuid())
  projectId   String
  userId      String
  type        ActivityType
  description String
  mediaIds    String[]
  timestamp   DateTime     @default(now())
  project     Project      @relation(fields: [projectId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@index([projectId, timestamp])
  @@index([userId])
}

model Gallery {
  id          String        @id @default(uuid())
  projectId   String
  createdById String
  name        String
  description String?
  shareToken  String        @unique @default(cuid())
  isPublic    Boolean       @default(false)
  password    String?
  expiresAt   DateTime?
  brandLogo   String?
  brandColor  String?
  watermark   Boolean       @default(true)
  viewCount   Int           @default(0)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  createdBy   User          @relation(fields: [createdById], references: [id])
  project     Project       @relation(fields: [projectId], references: [id])
  items       GalleryItem[]
  views       GalleryView[]

  @@index([projectId])
  @@index([createdById])
  @@index([shareToken])
}

model GalleryItem {
  id        String  @id @default(uuid())
  galleryId String
  mediaId   String
  order     Int     @default(0)
  caption   String?
  gallery   Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  media     Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([galleryId, mediaId])
  @@index([galleryId, order])
}

model GalleryView {
  id         String   @id @default(uuid())
  galleryId  String
  viewerIp   String
  viewerInfo Json?
  viewedAt   DateTime @default(now())
  gallery    Gallery  @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@index([galleryId, viewedAt])
}

model ProjectTimeline {
  id            String         @id @default(uuid())
  projectId     String         @unique
  shareToken    String         @unique @default(cuid())
  isPublic      Boolean        @default(false)
  password      String?
  showAllMedia  Boolean        @default(true)
  mediaTypes    String[]       @default(["PHOTO", "VIDEO"])
  activityTypes String[]
  brandLogo     String?
  brandColor    String?
  title         String?
  description   String?
  viewCount     Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  project       Project        @relation(fields: [projectId], references: [id])
  views         TimelineView[]

  @@index([shareToken])
}

model TimelineView {
  id         String          @id @default(uuid())
  timelineId String
  viewerIp   String
  viewerInfo Json?
  viewedAt   DateTime        @default(now())
  timeline   ProjectTimeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)

  @@index([timelineId, viewedAt])
}

model Comment {
  id           String     @id @default(uuid())
  content      String
  originalLang String     @default("en")
  translations Json?
  mediaId      String
  userId       String
  parentId     String?
  mentions     String[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  media        Media      @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  parent       Comment?   @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies      Comment[]  @relation("CommentReplies")
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions    Reaction[]

  @@index([mediaId])
  @@index([userId])
  @@index([parentId])
}

model Reaction {
  id        String   @id @default(uuid())
  type      String
  commentId String
  userId    String
  createdAt DateTime @default(now())
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commentId, userId, type])
  @@index([commentId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String
  title     String
  message   String
  data      Json?
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model PushSubscription {
  id         String   @id @default(uuid())
  userId     String
  endpoint   String
  p256dh     String
  auth       String
  deviceName String   @default("Unknown Device")
  createdAt  DateTime @default(now())
  lastUsed   DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, endpoint])
  @@index([userId])
  @@index([lastUsed])
}

model TeamChat {
  id           String   @id @default(uuid())
  projectId    String
  userId       String
  message      String
  originalLang String   @default("en")
  translations Json?
  mentions     String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([projectId])
  @@index([userId])
  @@index([createdAt])
}

model Tag {
  id          String     @id @default(uuid())
  name        String
  slug        String
  color       String     @default("#3B82F6")
  description String?
  companyId   String
  createdById String
  category    String?
  isSystem    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  mediaTags   MediaTag[]
  company     Company    @relation(fields: [companyId], references: [id])
  createdBy   User       @relation(fields: [createdById], references: [id])

  @@unique([companyId, slug])
  @@index([companyId, category])
  @@index([name])
}

model Label {
  id          String         @id @default(uuid())
  name        String
  slug        String
  color       String         @default("#10B981")
  description String?
  companyId   String
  createdById String
  type        String
  icon        String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  company     Company        @relation(fields: [companyId], references: [id])
  createdBy   User           @relation(fields: [createdById], references: [id])
  projects    ProjectLabel[]

  @@unique([companyId, slug])
  @@index([companyId, type])
  @@index([name])
}

model MediaTag {
  id         String   @id @default(uuid())
  mediaId    String
  tagId      String
  taggedById String
  taggedAt   DateTime @default(now())
  media      Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taggedBy   User     @relation(fields: [taggedById], references: [id])

  @@unique([mediaId, tagId])
  @@index([mediaId])
  @@index([tagId])
  @@index([taggedAt])
}

model ProjectLabel {
  id           String   @id @default(uuid())
  projectId    String
  labelId      String
  assignedById String
  assignedAt   DateTime @default(now())
  assignedBy   User     @relation(fields: [assignedById], references: [id])
  label        Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, labelId])
  @@index([projectId])
  @@index([labelId])
}

model SavedFilter {
  id          String   @id @default(uuid())
  name        String
  description String?
  companyId   String
  createdById String
  filters     Json
  isPublic    Boolean  @default(false)
  shareToken  String   @unique @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  company     Company  @relation(fields: [companyId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([companyId])
  @@index([createdById])
  @@index([shareToken])
}

model StarredProject {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  starredAt DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([starredAt])
}

model StarredUser {
  id          String   @id @default(uuid())
  userId      String
  starredId   String
  starredAt   DateTime @default(now())
  starredUser User     @relation("StarredUser", fields: [starredId], references: [id], onDelete: Cascade)
  user        User     @relation("StarringUser", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, starredId])
  @@index([userId])
  @@index([starredId])
}

model FeedPreferences {
  id                 String   @id @default(uuid())
  userId             String   @unique
  projectOrder       String[]
  showStarredFirst   Boolean  @default(true)
  hideInactive       Boolean  @default(false)
  hiddenProjects     String[]
  viewMode           String   @default("grid")
  itemsPerPage       Int      @default(20)
  autoRefresh        Boolean  @default(true)
  refreshInterval    Int      @default(30)
  emailNotifications Boolean  @default(true)
  pushNotifications  Boolean  @default(true)
  notificationTypes  Json?
  feedSettings       Json?
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FeedEvent {
  id         String   @id @default(uuid())
  projectId  String
  userId     String
  eventType  String
  entityType String
  entityId   String
  metadata   Json?
  createdAt  DateTime @default(now())
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])

  @@index([projectId, createdAt])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

model AIReport {
  id          String        @id @default(uuid())
  projectId   String
  userId      String
  reportType  ReportType
  status      ReportStatus  @default(PENDING)
  title       String
  dateRange   Json?
  mediaIds    String[]
  sections    Json?
  content     Json?
  summary     String?
  todoItems   Json?
  pdfUrl      String?
  shareToken  String        @unique @default(cuid())
  generatedAt DateTime?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  project     Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id])
  shares      ReportShare[]

  @@index([projectId])
  @@index([userId])
  @@index([reportType])
  @@index([shareToken])
  @@index([createdAt])
}

model ReportShare {
  id             String    @id @default(uuid())
  reportId       String
  sharedById     String
  recipientEmail String?
  recipientPhone String?
  expiresAt      DateTime?
  viewCount      Int       @default(0)
  lastViewedAt   DateTime?
  method         String
  createdAt      DateTime  @default(now())
  report         AIReport  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  sharedBy       User      @relation(fields: [sharedById], references: [id])

  @@index([reportId])
  @@index([sharedById])
  @@index([createdAt])
}

model ReportTemplate {
  id         String     @id @default(uuid())
  companyId  String
  name       String
  reportType ReportType
  sections   Json
  styling    Json?
  logoUrl    String?
  isDefault  Boolean    @default(false)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  company    Company    @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([reportType])
}

model FormsData {
  id          String   @id @default(uuid())
  projectId   String
  userId      String
  formType    String
  data        Json
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
  @@index([formType])
  @@index([submittedAt])
}

model RefreshToken {
  id            String    @id @default(uuid())
  token         String    @unique
  userId        String
  family        String    @default(uuid())
  issuedAt      DateTime  @default(now())
  expiresAt     DateTime
  rotatedAt     DateTime?
  ipAddress     String?
  userAgent     String?
  revokedAt     DateTime?
  revokedReason String?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
  @@index([family])
  @@index([expiresAt])
  @@index([revokedAt])
}

model SafetyIncident {
  id                 String             @id @default(uuid())
  projectId          String
  reportedById       String
  assignedToId       String?
  incidentType       SafetyIncidentType
  severity           SafetySeverity
  status             SafetyStatus       @default(OPEN)
  title              String
  description        String
  location           String?
  coordinates        Json?
  mediaIds           String[]
  witnessIds         String[]
  oshaReportable     Boolean            @default(false)
  oshaFormData       Json?
  oshaFiledAt        DateTime?
  occurredAt         DateTime
  reportedAt         DateTime           @default(now())
  dueDate            DateTime?
  resolvedAt         DateTime?
  investigationNotes String?
  rootCause          String?
  correctiveActions  Json?
  metadata           Json?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  actions            SafetyAction[]
  assignedTo         User?              @relation("AssignedIncidents", fields: [assignedToId], references: [id])
  project            Project            @relation(fields: [projectId], references: [id])
  reportedBy         User               @relation("ReportedIncidents", fields: [reportedById], references: [id])

  @@index([projectId, occurredAt])
  @@index([reportedById])
  @@index([status])
  @@index([severity])
}

model SafetyAction {
  id               String         @id @default(uuid())
  incidentId       String
  assignedToId     String
  title            String
  description      String
  priority         ActionPriority @default(MEDIUM)
  status           ActionStatus   @default(OPEN)
  dueDate          DateTime
  completedAt      DateTime?
  completionNotes  String?
  evidenceMediaIds String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  assignedTo       User           @relation(fields: [assignedToId], references: [id])
  incident         SafetyIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)

  @@index([incidentId])
  @@index([assignedToId])
  @@index([dueDate])
}

model PPEDetection {
  id           String    @id @default(uuid())
  mediaId      String
  detectedById String?
  aiConfidence Float
  detectedPPE  Json
  missingPPE   String[]
  verified     Boolean   @default(false)
  verifiedAt   DateTime?
  actualPPE    Json?
  compliant    Boolean   @default(true)
  violations   String[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  detectedBy   User?     @relation(fields: [detectedById], references: [id])
  media        Media     @relation(fields: [mediaId], references: [id])

  @@index([mediaId])
  @@index([compliant])
  @@index([createdAt])
}

model SafetyChecklist {
  id              String                @id @default(uuid())
  projectId       String
  name            String
  description     String?
  category        String
  frequency       ChecklistFrequency
  items           Json
  assignedToRoles String[]
  isActive        Boolean               @default(true)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  submissions     ChecklistSubmission[]
  project         Project               @relation(fields: [projectId], references: [id])

  @@index([projectId])
  @@index([category])
}

model ChecklistSubmission {
  id            String           @id @default(uuid())
  checklistId   String
  submittedById String
  responses     Json
  score         Float?
  status        SubmissionStatus @default(COMPLETED)
  mediaIds      String[]
  notes         String?
  submittedAt   DateTime         @default(now())
  checklist     SafetyChecklist  @relation(fields: [checklistId], references: [id])
  submittedBy   User             @relation(fields: [submittedById], references: [id])

  @@index([checklistId])
  @@index([submittedById])
  @@index([submittedAt])
}

model QualityInspection {
  id             String            @id @default(uuid())
  projectId      String
  inspectorId    String
  assignedById   String?
  inspectionType InspectionType
  workScope      String
  location       String?
  scheduledDate  DateTime
  startedAt      DateTime?
  completedAt    DateTime?
  status         InspectionStatus  @default(SCHEDULED)
  overallResult  InspectionResult?
  score          Float?
  checklistItems Json
  mediaIds       String[]
  notes          String?
  defectsFound   Int               @default(0)
  criticalIssues Int               @default(0)
  approvedById   String?
  approvedAt     DateTime?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  defects        QualityDefect[]
  approvedBy     User?             @relation("InspectionApprover", fields: [approvedById], references: [id])
  assignedBy     User?             @relation("InspectionAssigner", fields: [assignedById], references: [id])
  inspector      User              @relation("QualityInspector", fields: [inspectorId], references: [id])
  project        Project           @relation(fields: [projectId], references: [id])

  @@index([projectId, scheduledDate])
  @@index([inspectorId])
  @@index([status])
}

model QualityDefect {
  id              String            @id @default(uuid())
  inspectionId    String
  discoveredById  String
  defectType      DefectType
  severity        DefectSeverity
  category        String
  description     String
  location        String?
  coordinates     Json?
  mediaIds        String[]
  measurementData Json?
  status          DefectStatus      @default(OPEN)
  assignedToId    String?
  dueDate         DateTime?
  resolutionNotes String?
  resolvedAt      DateTime?
  verifiedById    String?
  verifiedAt      DateTime?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  assignedTo      User?             @relation("DefectAssignee", fields: [assignedToId], references: [id])
  discoveredBy    User              @relation("DefectDiscoverer", fields: [discoveredById], references: [id])
  inspection      QualityInspection @relation(fields: [inspectionId], references: [id])
  verifiedBy      User?             @relation("DefectVerifier", fields: [verifiedById], references: [id])

  @@index([inspectionId])
  @@index([status])
  @@index([severity])
}

model PunchListItem {
  id              String        @id @default(uuid())
  projectId       String
  createdById     String
  assignedToId    String?
  title           String
  description     String
  location        String?
  trade           String?
  priority        PunchPriority @default(MEDIUM)
  status          PunchStatus   @default(OPEN)
  mediaIds        String[]
  dueDate         DateTime?
  completedAt     DateTime?
  verifiedAt      DateTime?
  completionNotes String?
  verifiedById    String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  assignedTo      User?         @relation("PunchListAssignee", fields: [assignedToId], references: [id])
  createdBy       User          @relation("PunchListCreator", fields: [createdById], references: [id])
  project         Project       @relation(fields: [projectId], references: [id])
  verifiedBy      User?         @relation("PunchListVerifier", fields: [verifiedById], references: [id])

  @@index([projectId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
}

model MaterialDelivery {
  id                  String         @id @default(uuid())
  projectId           String
  receivedById        String?
  supplierName        String
  supplierContact     String?
  driverName          String?
  purchaseOrderNumber String?
  billOfLading        String?
  materialType        String
  description         String
  quantity            String
  unit                String?
  scheduledDate       DateTime
  actualDate          DateTime?
  status              DeliveryStatus @default(SCHEDULED)
  verified            Boolean        @default(false)
  verifiedAt          DateTime?
  mediaIds            String[]
  notes               String?
  qualityCheck        Json?
  damageReported      Boolean        @default(false)
  damageNotes         String?
  storageLocation     String?
  coordinates         Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  items               DeliveryItem[]
  project             Project        @relation(fields: [projectId], references: [id])
  receivedBy          User?          @relation(fields: [receivedById], references: [id])

  @@index([projectId, scheduledDate])
  @@index([status])
  @@index([supplierName])
}

model DeliveryItem {
  id           String           @id @default(uuid())
  deliveryId   String
  itemNumber   String?
  description  String
  specifiedQty String
  actualQty    String?
  unit         String
  condition    ItemCondition    @default(GOOD)
  notes        String?
  mediaIds     String[]
  createdAt    DateTime         @default(now())
  delivery     MaterialDelivery @relation(fields: [deliveryId], references: [id], onDelete: Cascade)

  @@index([deliveryId])
}

model Vendor {
  id           String     @id @default(uuid())
  companyId    String
  name         String
  contactName  String?
  email        String?
  phone        String?
  address      String?
  vendorType   VendorType
  specialties  String[]
  rating       Float?
  totalOrders  Int        @default(0)
  onTimeRate   Float?
  qualityScore Float?
  isActive     Boolean    @default(true)
  isPreferred  Boolean    @default(false)
  notes        String?
  metadata     Json?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  company      Company    @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([vendorType])
}

model TrainingRecord {
  id                  String              @id @default(uuid())
  userId              String
  certificationType   CertificationType
  certificationName   String
  issuingOrganization String?
  completedDate       DateTime
  expirationDate      DateTime?
  reminderDate        DateTime?
  certificateNumber   String?
  mediaIds            String[]
  verified            Boolean             @default(false)
  verifiedById        String?
  verifiedAt          DateTime?
  status              CertificationStatus @default(ACTIVE)
  notes               String?
  metadata            Json?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  user                User                @relation(fields: [userId], references: [id])
  verifiedBy          User?               @relation("CertificationVerifier", fields: [verifiedById], references: [id])

  @@index([userId])
  @@index([certificationType])
  @@index([expirationDate])
  @@index([status])
}

model TrainingCourse {
  id             String               @id @default(uuid())
  companyId      String
  title          String
  description    String
  category       String
  duration       Int?
  modules        Json
  mediaIds       String[]
  requiredFor    String[]
  prerequisites  String[]
  isActive       Boolean              @default(true)
  validityPeriod Int?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  company        Company              @relation(fields: [companyId], references: [id])
  enrollments    TrainingEnrollment[]

  @@index([companyId])
  @@index([category])
}

model TrainingEnrollment {
  id          String           @id @default(uuid())
  courseId    String
  userId      String
  status      EnrollmentStatus @default(ENROLLED)
  progress    Float            @default(0)
  startedAt   DateTime?
  completedAt DateTime?
  score       Float?
  attempts    Int              @default(0)
  maxAttempts Int              @default(3)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  course      TrainingCourse   @relation(fields: [courseId], references: [id])
  user        User             @relation(fields: [userId], references: [id])

  @@unique([courseId, userId])
  @@index([userId])
  @@index([status])
}

model ProjectMetrics {
  id                  String   @id @default(uuid())
  projectId           String
  date                DateTime @db.Date
  safetyScore         Float?
  incidentCount       Int      @default(0)
  nearMissCount       Int      @default(0)
  daysWithoutIncident Int      @default(0)
  qualityScore        Float?
  inspectionCount     Int      @default(0)
  defectCount         Int      @default(0)
  reworkHours         Float?
  plannedProgress     Float?
  actualProgress      Float?
  mediaCount          Int      @default(0)
  activityCount       Int      @default(0)
  activeUsers         Int      @default(0)
  totalHours          Float?
  productivityScore   Float?
  deliveriesPlanned   Int      @default(0)
  deliveriesOnTime    Int      @default(0)
  materialIssues      Int      @default(0)
  efficiencyRatio     Float?
  safetyIncidentRate  Float?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  project             Project  @relation(fields: [projectId], references: [id])

  @@unique([projectId, date])
  @@index([projectId])
  @@index([date])
}

model PerformanceBenchmark {
  id              String   @id @default(uuid())
  companyId       String
  name            String
  category        String
  metric          String
  targetValue     Float
  minAcceptable   Float?
  maxAcceptable   Float?
  industryAverage Float?
  industryBest    Float?
  projectTypes    String[]
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  company         Company  @relation(fields: [companyId], references: [id])

  @@index([companyId])
  @@index([category])
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  FOREMAN
  WORKER
  STEEL_ERECTOR
  WELDER
  SAFETY_INSPECTOR
  VIEWER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
}

enum ActivityType {
  ERECTION
  FABRICATION
  DELIVERY
  WELDING
  BOLTING
  PLUMBING
  DECKING
  SAFETY
  OTHER
}

enum MediaType {
  PHOTO
  VIDEO
  DUAL_VIDEO
}

enum MediaStatus {
  UPLOADING
  PROCESSING
  READY
  FAILED
}

enum ReportType {
  PROGRESS_RECAP
  SUMMARY
  DAILY_LOG
  SAFETY_REPORT
  QUALITY_REPORT
  COMPLIANCE_REPORT
  TRAINING_REPORT
  SUPPLY_CHAIN_REPORT
  ANALYTICS_DASHBOARD
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

enum SafetyIncidentType {
  NEAR_MISS
  FIRST_AID
  INJURY
  ILLNESS
  PROPERTY_DAMAGE
  ENVIRONMENTAL
  VIOLATION
  UNSAFE_CONDITION
  UNSAFE_ACT
}

enum SafetySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SafetyStatus {
  OPEN
  INVESTIGATING
  PENDING_APPROVAL
  RESOLVED
  CLOSED
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ChecklistFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  AS_NEEDED
}

enum SubmissionStatus {
  COMPLETED
  INCOMPLETE
  REQUIRES_ACTION
}

enum InspectionType {
  STRUCTURAL_STEEL
  WELDING
  BOLTING
  MATERIAL_VERIFICATION
  DIMENSIONAL
  SURFACE_PREPARATION
  COATING
  FINAL_INSPECTION
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InspectionResult {
  PASSED
  PASSED_WITH_NOTES
  FAILED
  REQUIRES_REWORK
}

enum DefectType {
  DIMENSIONAL_VARIANCE
  WELD_DEFECT
  BOLT_ISSUE
  SURFACE_DEFECT
  ALIGNMENT_ISSUE
  MATERIAL_DEFECT
  COATING_DEFECT
  MISSING_COMPONENT
  DAMAGE
}

enum DefectSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum DefectStatus {
  OPEN
  ASSIGNED
  IN_REPAIR
  REPAIR_COMPLETE
  VERIFIED
  CLOSED
}

enum PunchPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PunchStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  VERIFIED
  CLOSED
}

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  ARRIVED
  INSPECTED
  ACCEPTED
  REJECTED
  PARTIAL
}

enum ItemCondition {
  GOOD
  DAMAGED
  DEFECTIVE
  MISSING
}

enum VendorType {
  STEEL_SUPPLIER
  FABRICATOR
  TRANSPORTATION
  EQUIPMENT_RENTAL
  SUBCONTRACTOR
  MATERIAL_SUPPLIER
}

enum CertificationType {
  OSHA_10
  OSHA_30
  CRANE_OPERATOR
  RIGGING
  FALL_PROTECTION
  CONFINED_SPACE
  WELDING_CERTIFICATION
  FIRST_AID_CPR
  SAFETY_TRAINING
  TRADE_SPECIFIC
  COMPANY_ORIENTATION
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}
