generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id             String           @id @default(uuid())
  name           String           @unique
  users          User[]
  projects       Project[]
  tags           Tag[]
  labels         Label[]
  savedFilters   SavedFilter[]
  reportTemplates ReportTemplate[]
  
  // New Feature Relations
  trainingCourses       TrainingCourse[]
  vendors               Vendor[]
  performanceBenchmarks PerformanceBenchmark[]
  
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

enum UserRole {
  ADMIN
  PROJECT_MANAGER
  FOREMAN
  WORKER
  STEEL_ERECTOR
  WELDER
  SAFETY_INSPECTOR
  VIEWER
}

enum ProjectStatus {
  PLANNING
  ACTIVE
  ON_HOLD
  COMPLETED
  ARCHIVED
}

enum ActivityType {
  ERECTION
  FABRICATION
  DELIVERY
  WELDING
  BOLTING
  PLUMBING
  DECKING
  SAFETY
  OTHER
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  password     String
  name         String
  role         UserRole
  companyId    String
  unionMember  Boolean  @default(false)
  phoneNumber  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  company         Company          @relation(fields: [companyId], references: [id])
  media           Media[]
  mediaViews      MediaView[]
  annotations     Annotation[]
  activities      Activity[]
  projectMembers  ProjectMember[]
  galleries       Gallery[]
  comments        Comment[]
  reactions       Reaction[]
  notifications   Notification[]
  teamChats       TeamChat[]
  createdTags     Tag[]
  createdLabels   Label[]
  taggedMedia     MediaTag[]
  assignedLabels  ProjectLabel[]
  savedFilters    SavedFilter[]
  starredProjects StarredProject[]
  starringUsers   StarredUser[]    @relation("StarringUser")
  starredByUsers  StarredUser[]    @relation("StarredUser")
  feedPreferences FeedPreferences?
  feedEvents      FeedEvent[]
  aiReports       AIReport[]
  reportShares    ReportShare[]
  formsData         FormsData[]
  refreshTokens     RefreshToken[]
  pushSubscriptions PushSubscription[]
  
  // Safety & Compliance Relations
  reportedIncidents     SafetyIncident[]    @relation("ReportedIncidents")
  assignedIncidents     SafetyIncident[]    @relation("AssignedIncidents")
  safetyActions         SafetyAction[]
  ppeDetections         PPEDetection[]
  checklistSubmissions  ChecklistSubmission[]
  
  // Quality Control Relations
  qualityInspections    QualityInspection[] @relation("QualityInspector")
  assignedInspections   QualityInspection[] @relation("InspectionAssigner")
  approvedInspections   QualityInspection[] @relation("InspectionApprover")
  discoveredDefects     QualityDefect[]     @relation("DefectDiscoverer")
  assignedDefects       QualityDefect[]     @relation("DefectAssignee")
  verifiedDefects       QualityDefect[]     @relation("DefectVerifier")
  createdPunchItems     PunchListItem[]     @relation("PunchListCreator")
  assignedPunchItems    PunchListItem[]     @relation("PunchListAssignee")
  verifiedPunchItems    PunchListItem[]     @relation("PunchListVerifier")
  
  // Supply Chain Relations
  receivedDeliveries    MaterialDelivery[]
  
  // Training Relations
  trainingRecords       TrainingRecord[]
  verifiedCertifications TrainingRecord[]   @relation("CertificationVerifier")
  trainingEnrollments   TrainingEnrollment[]
  
  // Team Presence & Communication Relations
  presenceRecords       UserPresence[]
  teamNotifications     TeamNotification[]
}

model Project {
  id         String        @id @default(uuid())
  jobNumber  String        @unique
  name       String
  location   String
  address    String?
  status     ProjectStatus @default(ACTIVE)
  companyId  String
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  company    Company         @relation(fields: [companyId], references: [id])
  media      Media[]
  activities Activity[]
  members    ProjectMember[]
  galleries  Gallery[]
  timeline   ProjectTimeline?
  teamChats  TeamChat[]
  labels     ProjectLabel[]
  starredBy  StarredProject[]
  feedEvents FeedEvent[]
  aiReports  AIReport[]
  formsData  FormsData[]
  
  // Safety & Compliance Relations
  safetyIncidents       SafetyIncident[]
  safetyChecklists      SafetyChecklist[]
  
  // Quality Control Relations
  qualityInspections    QualityInspection[]
  punchListItems        PunchListItem[]
  
  // Supply Chain Relations
  materialDeliveries    MaterialDelivery[]
  
  // Analytics Relations
  projectMetrics        ProjectMetrics[]
  
  // Team Presence & Communication Relations
  presenceRecords       UserPresence[]
  teamNotifications     TeamNotification[]
}

model ProjectMember {
  projectId  String
  userId     String
  role       String?
  assignedAt DateTime @default(now())
  
  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  
  @@id([projectId, userId])
  @@index([userId])
}

model Media {
  id           String       @id @default(uuid())
  projectId    String
  userId       String
  fileUrl      String       // S3/MinIO URL
  thumbnailUrl String?      // For videos
  mediaType    MediaType    
  
  // File metadata
  fileSize     Int          // In bytes
  width        Int?         // For images/videos
  height       Int?         // For images/videos
  duration     Int?         // For videos (in seconds)
  
  // Location data
  latitude     Float?
  longitude    Float?
  address      String?
  
  // Business data
  tags         String[]
  timestamp    DateTime     @default(now())
  activityType ActivityType
  location     String?      // Building location (e.g., "Bay 3, Level 2")
  notes        String?
  metadata     Json?        // EXIF data, device info, video codec, etc.
  
  // Dual camera support
  isPictureInPicture Boolean  @default(false)
  frontCameraUrl     String?  // For PiP videos
  backCameraUrl      String?  // For PiP videos
  
  // Processing status
  status       MediaStatus  @default(PROCESSING)
  processedAt  DateTime?
  
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  project     Project      @relation(fields: [projectId], references: [id])
  user        User         @relation(fields: [userId], references: [id])
  annotations Annotation[]
  views       MediaView[]
  galleryItems GalleryItem[]
  comments    Comment[]
  mediaTags   MediaTag[]
  
  // Safety Relations
  ppeDetections PPEDetection[]
  
  @@index([projectId, timestamp])
  @@index([userId])
  @@index([activityType])
  @@index([status])
  @@map("media")
}

enum MediaType {
  PHOTO
  VIDEO
  DUAL_VIDEO
}

enum MediaStatus {
  UPLOADING
  PROCESSING
  READY
  FAILED
}

model MediaView {
  id        String   @id @default(uuid())
  mediaId   String
  userId    String
  viewedAt  DateTime @default(now())
  
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([mediaId, userId])
  @@index([mediaId])
  @@index([userId])
}

model Annotation {
  id        String   @id @default(uuid())
  mediaId   String
  userId    String
  data      Json     // Stores drawing data, text, measurements, etc.
  createdAt DateTime @default(now())
  
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id])
  
  @@index([mediaId])
  @@index([userId])
}

model Activity {
  id        String       @id @default(uuid())
  projectId String
  userId    String
  type      ActivityType
  description String
  mediaIds  String[]     // Array of related media IDs
  timestamp DateTime     @default(now())
  
  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  
  @@index([projectId, timestamp])
  @@index([userId])
}

// Gallery Models for sharing collections
model Gallery {
  id          String         @id @default(uuid())
  projectId   String
  createdById String
  name        String
  description String?
  shareToken  String         @unique @default(cuid())
  isPublic    Boolean        @default(false)
  password    String?        // Optional password protection
  expiresAt   DateTime?      // Optional expiration
  
  // Branding
  brandLogo   String?        // URL to custom logo
  brandColor  String?        // Hex color for theming
  watermark   Boolean        @default(true)
  
  // Analytics
  viewCount   Int            @default(0)
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  project     Project        @relation(fields: [projectId], references: [id])
  createdBy   User           @relation(fields: [createdById], references: [id])
  items       GalleryItem[]
  views       GalleryView[]
  
  @@index([projectId])
  @@index([createdById])
  @@index([shareToken])
}

model GalleryItem {
  id        String   @id @default(uuid())
  galleryId String
  mediaId   String
  order     Int      @default(0)
  caption   String?
  
  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  media   Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  
  @@unique([galleryId, mediaId])
  @@index([galleryId, order])
}

model GalleryView {
  id         String   @id @default(uuid())
  galleryId  String
  viewerIp   String   // Track unique viewers by IP
  viewerInfo Json?    // User agent, referrer, etc.
  viewedAt   DateTime @default(now())
  
  gallery Gallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  
  @@index([galleryId, viewedAt])
}

// Timeline Models
model ProjectTimeline {
  id           String    @id @default(uuid())
  projectId    String    @unique
  shareToken   String    @unique @default(cuid())
  isPublic     Boolean   @default(false)
  password     String?   // Optional password protection
  
  // Display settings
  showAllMedia Boolean   @default(true)  // Show all project media or filtered
  mediaTypes   String[]  @default(["PHOTO", "VIDEO"]) // Which media types to show
  activityTypes String[] // Which activity types to show (empty = all)
  
  // Branding
  brandLogo    String?   // URL to custom logo
  brandColor   String?   // Hex color for theming
  title        String?   // Custom timeline title
  description  String?   // Custom description
  
  // Analytics
  viewCount    Int       @default(0)
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  
  project      Project   @relation(fields: [projectId], references: [id])
  views        TimelineView[]
  
  @@index([shareToken])
}

model TimelineView {
  id         String          @id @default(uuid())
  timelineId String
  viewerIp   String          // Track unique viewers by IP
  viewerInfo Json?           // User agent, referrer, etc.
  viewedAt   DateTime        @default(now())
  
  timeline ProjectTimeline @relation(fields: [timelineId], references: [id], onDelete: Cascade)
  
  @@index([timelineId, viewedAt])
}

// Communication Models
model Comment {
  id             String    @id @default(uuid())
  content        String
  originalLang   String    @default("en")
  translations   Json?     // Store translations as JSON
  mediaId        String
  userId         String
  parentId       String?   // For threaded comments
  mentions       String[]  // Array of mentioned user IDs
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  media     Media       @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent    Comment?    @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[]   @relation("CommentReplies")
  reactions Reaction[]
  
  @@index([mediaId])
  @@index([userId])
  @@index([parentId])
}

model Reaction {
  id        String   @id @default(uuid())
  type      String   // 'like', 'thumbsup', 'thumbsdown', 'question', 'check'
  commentId String
  userId    String
  createdAt DateTime @default(now())
  
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([commentId, userId, type])
  @@index([commentId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(uuid())
  type      String   // 'mention', 'comment', 'reply', 'reaction', 'project_update'
  title     String
  message   String
  data      Json?    // Additional data like mediaId, commentId, etc.
  userId    String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([read])
  @@index([createdAt])
}

model PushSubscription {
  id         String   @id @default(uuid())
  userId     String
  endpoint   String   @db.Text
  p256dh     String
  auth       String
  deviceName String   @default("Unknown Device")
  createdAt  DateTime @default(now())
  lastUsed   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, endpoint])
  @@index([userId])
  @@index([lastUsed])
}

model TeamChat {
  id           String   @id @default(uuid())
  projectId    String
  userId       String
  message      String
  originalLang String   @default("en")
  translations Json?
  mentions     String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@index([userId])
  @@index([createdAt])
}

// Tag System Models
model Tag {
  id          String      @id @default(uuid())
  name        String
  slug        String      // URL-friendly version
  color       String      @default("#3B82F6") // Hex color
  description String?
  companyId   String
  createdById String
  
  // Tag categories for organization
  category    String?     // e.g., "Material", "Room Type", "Status", "Trade"
  isSystem    Boolean     @default(false) // System tags can't be deleted
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  company     Company     @relation(fields: [companyId], references: [id])
  createdBy   User        @relation(fields: [createdById], references: [id])
  mediaTags   MediaTag[]
  
  @@unique([companyId, slug])
  @@index([companyId, category])
  @@index([name])
}

model Label {
  id          String      @id @default(uuid())
  name        String
  slug        String      // URL-friendly version
  color       String      @default("#10B981") // Hex color
  description String?
  companyId   String
  createdById String
  
  // Label types for projects
  type        String      // e.g., "project_type", "project_status", "budget_range"
  icon        String?     // Icon identifier
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  company     Company     @relation(fields: [companyId], references: [id])
  createdBy   User        @relation(fields: [createdById], references: [id])
  projects    ProjectLabel[]
  
  @@unique([companyId, slug])
  @@index([companyId, type])
  @@index([name])
}

// Many-to-many relationship for media tags
model MediaTag {
  id         String   @id @default(uuid())
  mediaId    String
  tagId      String
  taggedById String
  taggedAt   DateTime @default(now())
  
  media      Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  taggedBy   User     @relation(fields: [taggedById], references: [id])
  
  @@unique([mediaId, tagId])
  @@index([mediaId])
  @@index([tagId])
  @@index([taggedAt])
}

// Many-to-many relationship for project labels
model ProjectLabel {
  id         String   @id @default(uuid())
  projectId  String
  labelId    String
  assignedById String
  assignedAt DateTime @default(now())
  
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  label      Label    @relation(fields: [labelId], references: [id], onDelete: Cascade)
  assignedBy User     @relation(fields: [assignedById], references: [id])
  
  @@unique([projectId, labelId])
  @@index([projectId])
  @@index([labelId])
}

// Saved search filters for custom catalogs
model SavedFilter {
  id          String   @id @default(uuid())
  name        String
  description String?
  companyId   String
  createdById String
  
  // Filter criteria stored as JSON
  filters     Json     // { tags: [], labels: [], dateRange: {}, mediaTypes: [], etc. }
  
  // Display settings
  isPublic    Boolean  @default(false) // Available to all company users
  shareToken  String   @unique @default(cuid()) // For external sharing
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id])
  createdBy   User     @relation(fields: [createdById], references: [id])
  
  @@index([companyId])
  @@index([createdById])
  @@index([shareToken])
}

// Project starring and feed preferences
model StarredProject {
  id         String   @id @default(uuid())
  userId     String
  projectId  String
  starredAt  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([starredAt])
}

model StarredUser {
  id          String   @id @default(uuid())
  userId      String   // The user doing the starring
  starredId   String   // The user being starred
  starredAt   DateTime @default(now())
  
  user        User     @relation("StarringUser", fields: [userId], references: [id], onDelete: Cascade)
  starredUser User     @relation("StarredUser", fields: [starredId], references: [id], onDelete: Cascade)
  
  @@unique([userId, starredId])
  @@index([userId])
  @@index([starredId])
}

model FeedPreferences {
  id               String   @id @default(uuid())
  userId           String   @unique
  
  // Feed ordering preferences
  projectOrder     String[] // Array of project IDs in custom order
  showStarredFirst Boolean  @default(true)
  
  // Feed filtering preferences
  hideInactive     Boolean  @default(false)
  hiddenProjects   String[] // Array of project IDs to hide
  
  // Feed display preferences
  viewMode         String   @default("grid") // grid, list, compact
  itemsPerPage     Int      @default(20)
  autoRefresh      Boolean  @default(true)
  refreshInterval  Int      @default(30) // seconds
  
  // Notification preferences
  emailNotifications Boolean @default(true)
  pushNotifications  Boolean @default(true)
  notificationTypes  Json?   // Object with notification type preferences
  feedSettings       Json?   // Additional feed settings
  
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// Project activity feed events
model FeedEvent {
  id           String      @id @default(uuid())
  projectId    String
  userId       String
  eventType    String      // media_uploaded, comment_added, tag_applied, member_added, etc.
  entityType   String      // media, comment, tag, user, etc.
  entityId     String      // ID of the related entity
  metadata     Json?       // Additional event data
  createdAt    DateTime    @default(now())
  
  project      Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id])
  
  @@index([projectId, createdAt])
  @@index([userId])
  @@index([eventType])
  @@index([createdAt])
}

// AI Report Generation
enum ReportType {
  PROGRESS_RECAP    // Comprehensive project progress report
  SUMMARY           // Quick summary for group of photos
  DAILY_LOG         // Daily activity log with todo list
  SAFETY_REPORT     // Safety incident and compliance report
  QUALITY_REPORT    // Quality inspection and defect report
  COMPLIANCE_REPORT // Regulatory compliance report
  TRAINING_REPORT   // Training and certification report
  SUPPLY_CHAIN_REPORT // Material delivery and vendor report
  ANALYTICS_DASHBOARD // Performance analytics report
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

model AIReport {
  id           String       @id @default(uuid())
  projectId    String
  userId       String
  reportType   ReportType
  status       ReportStatus @default(PENDING)
  
  // Report configuration
  title        String
  dateRange    Json?        // { start: Date, end: Date }
  mediaIds     String[]     // Selected media for the report
  sections     Json?        // Custom sections for progress recap
  
  // Generated content
  content      Json?        // The generated report content
  summary      String?      // Brief summary
  todoItems    Json?        // For daily logs
  
  // File storage
  pdfUrl       String?      // Generated PDF URL
  shareToken   String       @unique @default(cuid())
  
  // Metadata
  generatedAt  DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  project      Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id])
  shares       ReportShare[]
  
  @@index([projectId])
  @@index([userId])
  @@index([reportType])
  @@index([shareToken])
  @@index([createdAt])
}

model ReportShare {
  id          String   @id @default(uuid())
  reportId    String
  sharedById  String
  
  // Share settings
  recipientEmail String?
  recipientPhone String?
  expiresAt      DateTime?
  viewCount      Int      @default(0)
  lastViewedAt   DateTime?
  
  // Share method
  method         String   // email, sms, link
  
  createdAt      DateTime @default(now())
  
  report         AIReport @relation(fields: [reportId], references: [id], onDelete: Cascade)
  sharedBy       User     @relation(fields: [sharedById], references: [id])
  
  @@index([reportId])
  @@index([sharedById])
  @@index([createdAt])
}

// Report templates for customization
model ReportTemplate {
  id          String   @id @default(uuid())
  companyId   String
  name        String
  reportType  ReportType
  
  // Template configuration
  sections    Json     // Sections to include
  styling     Json?    // Custom styling options
  logoUrl     String?  // Company logo
  
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id])
  
  @@index([companyId])
  @@index([reportType])
}

// Forms data storage
model FormsData {
  id          String   @id @default(uuid())
  projectId   String   // Associated project
  userId      String
  formType    String   // e.g., "FSW_IRON_TASK", "DAILY_TIMESHEET", etc.
  data        Json     // JSON blob containing all form data
  submittedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  project     Project  @relation(fields: [projectId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  
  @@index([projectId])
  @@index([userId])
  @@index([formType])
  @@index([submittedAt])
}

// Refresh Token Management
model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  
  // Token metadata
  family      String   @default(uuid()) // Token family for rotation tracking
  issuedAt    DateTime @default(now())
  expiresAt   DateTime
  rotatedAt   DateTime? // When this token was rotated (replaced)
  
  // Security tracking
  ipAddress   String?
  userAgent   String?
  
  // Revocation
  revokedAt   DateTime?
  revokedReason String? // 'logout', 'rotation', 'suspicious', 'manual'
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
  @@index([family])
  @@index([expiresAt])
  @@index([revokedAt])
}

// ================================
// TEAM PRESENCE & COMMUNICATION
// ================================

// Team presence tracking for real-time collaboration
model UserPresence {
  id        String   @id @default(uuid())
  userId    String
  projectId String?  
  
  // Presence status
  status    PresenceStatus @default(ONLINE)
  lastSeen  DateTime       @default(now())
  
  // Activity context
  currentPage String?      // Which page/section user is viewing
  activity    String?      // Current activity description
  
  // Device info
  deviceType  String?      // mobile, desktop, tablet
  userAgent   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@unique([userId, projectId])
  @@index([userId])
  @@index([projectId])
  @@index([status])
  @@index([lastSeen])
}

enum PresenceStatus {
  ONLINE
  AWAY
  BUSY
  OFFLINE
}

// Enhanced notifications system
model TeamNotification {
  id        String   @id @default(uuid())
  userId    String
  projectId String?
  
  // Notification details
  type      NotificationType
  title     String
  message   String
  
  // Status
  read      Boolean  @default(false)
  readAt    DateTime?
  
  // Context data
  data      Json?    // Additional context (mediaId, commentId, etc.)
  actionUrl String?  // URL to navigate to
  
  // Metadata
  priority  NotificationPriority @default(NORMAL)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([projectId])
  @@index([read])
  @@index([type])
  @@index([createdAt])
}

enum NotificationType {
  MENTION
  COMMENT
  MEDIA_UPLOAD
  PROJECT_UPDATE
  REPORT_GENERATED
  TEAM_JOIN
  ACTIVITY_ASSIGNED
  SYSTEM_ALERT
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

// ================================
// SAFETY & COMPLIANCE MODELS
// ================================

enum SafetyIncidentType {
  NEAR_MISS
  FIRST_AID
  INJURY
  ILLNESS
  PROPERTY_DAMAGE
  ENVIRONMENTAL
  VIOLATION
  UNSAFE_CONDITION
  UNSAFE_ACT
}

enum SafetySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SafetyStatus {
  OPEN
  INVESTIGATING
  PENDING_APPROVAL
  RESOLVED
  CLOSED
}

model SafetyIncident {
  id            String            @id @default(uuid())
  projectId     String
  reportedById  String
  assignedToId  String?
  
  // Incident Classification
  incidentType  SafetyIncidentType
  severity      SafetySeverity
  status        SafetyStatus      @default(OPEN)
  
  // Incident Details
  title         String
  description   String
  location      String?           // Building location (e.g., "Bay 3, Level 2")
  coordinates   Json?             // GPS coordinates if available
  
  // Evidence & Documentation
  mediaIds      String[]          // Photos, videos of incident
  witnessIds    String[]          // User IDs of witnesses
  
  // OSHA Integration
  oshaReportable Boolean         @default(false)
  oshaFormData   Json?           // OSHA 300/301 form data
  oshaFiledAt    DateTime?
  
  // Timeline
  occurredAt    DateTime
  reportedAt    DateTime         @default(now())
  dueDate       DateTime?        // Investigation due date
  resolvedAt    DateTime?
  
  // Investigation
  investigationNotes String?
  rootCause         String?
  correctiveActions Json?         // Array of corrective action items
  
  // Metadata
  metadata      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  project       Project          @relation(fields: [projectId], references: [id])
  reportedBy    User             @relation("ReportedIncidents", fields: [reportedById], references: [id])
  assignedTo    User?            @relation("AssignedIncidents", fields: [assignedToId], references: [id])
  actions       SafetyAction[]
  
  @@index([projectId, occurredAt])
  @@index([reportedById])
  @@index([status])
  @@index([severity])
}

enum ActionPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ActionStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model SafetyAction {
  id          String        @id @default(uuid())
  incidentId  String
  assignedToId String
  
  title       String
  description String
  priority    ActionPriority @default(MEDIUM)
  status      ActionStatus   @default(OPEN)
  
  dueDate     DateTime
  completedAt DateTime?
  
  // Evidence of completion
  completionNotes String?
  evidenceMediaIds String[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  incident    SafetyIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  assignedTo  User           @relation(fields: [assignedToId], references: [id])
  
  @@index([incidentId])
  @@index([assignedToId])
  @@index([dueDate])
}

model PPEDetection {
  id          String         @id @default(uuid())
  mediaId     String
  detectedById String?       // User who verified/corrected detection
  
  // AI Detection Results
  aiConfidence Float         // 0.0 - 1.0 confidence score
  detectedPPE  Json          // { hardhat: true, vest: false, gloves: true, etc. }
  missingPPE   String[]      // Array of missing PPE items
  
  // Manual Verification
  verified     Boolean       @default(false)
  verifiedAt   DateTime?
  actualPPE    Json?         // Manual correction of AI detection
  
  // Compliance
  compliant    Boolean       @default(true)
  violations   String[]      // Array of violation types
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  
  media        Media         @relation(fields: [mediaId], references: [id])
  detectedBy   User?         @relation(fields: [detectedById], references: [id])
  
  @@index([mediaId])
  @@index([compliant])
  @@index([createdAt])
}

enum ChecklistFrequency {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  ANNUALLY
  AS_NEEDED
}

model SafetyChecklist {
  id          String              @id @default(uuid())
  projectId   String
  name        String
  description String?
  
  // Checklist Configuration
  category    String              // PRE_SHIFT, EQUIPMENT, SITE_INSPECTION, etc.
  frequency   ChecklistFrequency  // DAILY, WEEKLY, MONTHLY, etc.
  items       Json                // Array of checklist items
  
  // Assignment
  assignedToRoles String[]        // User roles required to complete
  
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  
  project     Project             @relation(fields: [projectId], references: [id])
  submissions ChecklistSubmission[]
  
  @@index([projectId])
  @@index([category])
}

enum SubmissionStatus {
  COMPLETED
  INCOMPLETE
  REQUIRES_ACTION
}

model ChecklistSubmission {
  id          String          @id @default(uuid())
  checklistId String
  submittedById String
  
  // Submission Data
  responses   Json            // Responses to checklist items
  score       Float?          // Calculated compliance score
  status      SubmissionStatus @default(COMPLETED)
  
  // Evidence
  mediaIds    String[]        // Supporting photos/videos
  notes       String?
  
  submittedAt DateTime        @default(now())
  
  checklist   SafetyChecklist @relation(fields: [checklistId], references: [id])
  submittedBy User            @relation(fields: [submittedById], references: [id])
  
  @@index([checklistId])
  @@index([submittedById])
  @@index([submittedAt])
}

// ================================
// QUALITY CONTROL & INSPECTION MODELS
// ================================

enum InspectionType {
  STRUCTURAL_STEEL
  WELDING
  BOLTING
  MATERIAL_VERIFICATION
  DIMENSIONAL
  SURFACE_PREPARATION
  COATING
  FINAL_INSPECTION
}

enum InspectionStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum InspectionResult {
  PASSED
  PASSED_WITH_NOTES
  FAILED
  REQUIRES_REWORK
}

model QualityInspection {
  id              String            @id @default(uuid())
  projectId       String
  inspectorId     String
  assignedById    String?
  
  // Inspection Details
  inspectionType  InspectionType
  workScope       String            // Description of work being inspected
  location        String?           // Building location
  
  // Scheduling
  scheduledDate   DateTime
  startedAt       DateTime?
  completedAt     DateTime?
  
  // Status & Results
  status          InspectionStatus  @default(SCHEDULED)
  overallResult   InspectionResult?
  score           Float?            // 0-100 quality score
  
  // Documentation
  checklistItems  Json              // Inspection criteria and results
  mediaIds        String[]          // Photos/videos of work and issues
  notes           String?
  
  // Defects & Issues
  defectsFound    Int               @default(0)
  criticalIssues  Int               @default(0)
  
  // Approval
  approvedById    String?
  approvedAt      DateTime?
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  project         Project           @relation(fields: [projectId], references: [id])
  inspector       User              @relation("QualityInspector", fields: [inspectorId], references: [id])
  assignedBy      User?             @relation("InspectionAssigner", fields: [assignedById], references: [id])
  approvedBy      User?             @relation("InspectionApprover", fields: [approvedById], references: [id])
  defects         QualityDefect[]
  
  @@index([projectId, scheduledDate])
  @@index([inspectorId])
  @@index([status])
}

enum DefectType {
  DIMENSIONAL_VARIANCE
  WELD_DEFECT
  BOLT_ISSUE
  SURFACE_DEFECT
  ALIGNMENT_ISSUE
  MATERIAL_DEFECT
  COATING_DEFECT
  MISSING_COMPONENT
  DAMAGE
}

enum DefectSeverity {
  MINOR
  MAJOR
  CRITICAL
}

enum DefectStatus {
  OPEN
  ASSIGNED
  IN_REPAIR
  REPAIR_COMPLETE
  VERIFIED
  CLOSED
}

model QualityDefect {
  id              String          @id @default(uuid())
  inspectionId    String
  discoveredById  String
  
  // Defect Classification
  defectType      DefectType
  severity        DefectSeverity
  category        String          // DIMENSIONAL, VISUAL, STRUCTURAL, etc.
  
  // Defect Details
  description     String
  location        String?
  coordinates     Json?           // Precise location coordinates
  
  // Documentation
  mediaIds        String[]        // Photos showing the defect
  measurementData Json?           // Actual vs required measurements
  
  // Resolution
  status          DefectStatus    @default(OPEN)
  assignedToId    String?
  dueDate         DateTime?
  
  resolutionNotes String?
  resolvedAt      DateTime?
  verifiedById    String?
  verifiedAt      DateTime?
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  inspection      QualityInspection @relation(fields: [inspectionId], references: [id])
  discoveredBy    User              @relation("DefectDiscoverer", fields: [discoveredById], references: [id])
  assignedTo      User?             @relation("DefectAssignee", fields: [assignedToId], references: [id])
  verifiedBy      User?             @relation("DefectVerifier", fields: [verifiedById], references: [id])
  
  @@index([inspectionId])
  @@index([status])
  @@index([severity])
}

enum PunchPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum PunchStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  VERIFIED
  CLOSED
}

model PunchListItem {
  id            String          @id @default(uuid())
  projectId     String
  createdById   String
  assignedToId  String?
  
  // Item Details
  title         String
  description   String
  location      String?
  trade         String?         // STRUCTURAL, ELECTRICAL, PLUMBING, etc.
  
  // Priority & Status
  priority      PunchPriority   @default(MEDIUM)
  status        PunchStatus     @default(OPEN)
  
  // Documentation
  mediaIds      String[]        // Before/after photos
  
  // Timeline
  dueDate       DateTime?
  completedAt   DateTime?
  verifiedAt    DateTime?
  
  // Resolution
  completionNotes String?
  verifiedById    String?
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  // Relations
  project       Project         @relation(fields: [projectId], references: [id])
  createdBy     User            @relation("PunchListCreator", fields: [createdById], references: [id])
  assignedTo    User?           @relation("PunchListAssignee", fields: [assignedToId], references: [id])
  verifiedBy    User?           @relation("PunchListVerifier", fields: [verifiedById], references: [id])
  
  @@index([projectId])
  @@index([assignedToId])
  @@index([status])
  @@index([priority])
}

// ================================
// SUPPLY CHAIN MANAGEMENT MODELS
// ================================

enum DeliveryStatus {
  SCHEDULED
  IN_TRANSIT
  ARRIVED
  INSPECTED
  ACCEPTED
  REJECTED
  PARTIAL
}

model MaterialDelivery {
  id              String            @id @default(uuid())
  projectId       String
  receivedById    String?
  
  // Supplier Information
  supplierName    String
  supplierContact String?
  driverName      String?
  
  // Delivery Details
  purchaseOrderNumber String?
  billOfLading    String?
  materialType    String
  description     String
  quantity        String
  unit            String?           // TONS, PIECES, FEET, etc.
  
  // Scheduling
  scheduledDate   DateTime
  actualDate      DateTime?
  
  // Status & Verification
  status          DeliveryStatus    @default(SCHEDULED)
  verified        Boolean           @default(false)
  verifiedAt      DateTime?
  
  // Documentation
  mediaIds        String[]          // Photos of materials, BOL, etc.
  notes           String?
  
  // Quality Check
  qualityCheck    Json?             // Quality verification data
  damageReported  Boolean           @default(false)
  damageNotes     String?
  
  // Location
  storageLocation String?
  coordinates     Json?             // GPS coordinates
  
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  project         Project           @relation(fields: [projectId], references: [id])
  receivedBy      User?             @relation(fields: [receivedById], references: [id])
  items           DeliveryItem[]
  
  @@index([projectId, scheduledDate])
  @@index([status])
  @@index([supplierName])
}

enum ItemCondition {
  GOOD
  DAMAGED
  DEFECTIVE
  MISSING
}

model DeliveryItem {
  id            String            @id @default(uuid())
  deliveryId    String
  
  // Item Details
  itemNumber    String?
  description   String
  specifiedQty  String
  actualQty     String?
  unit          String
  
  // Quality
  condition     ItemCondition     @default(GOOD)
  notes         String?
  
  // Documentation
  mediaIds      String[]          // Item-specific photos
  
  createdAt     DateTime          @default(now())
  
  delivery      MaterialDelivery  @relation(fields: [deliveryId], references: [id], onDelete: Cascade)
  
  @@index([deliveryId])
}

enum VendorType {
  STEEL_SUPPLIER
  FABRICATOR
  TRANSPORTATION
  EQUIPMENT_RENTAL
  SUBCONTRACTOR
  MATERIAL_SUPPLIER
}

model Vendor {
  id            String        @id @default(uuid())
  companyId     String
  
  // Vendor Information
  name          String
  contactName   String?
  email         String?
  phone         String?
  address       String?
  
  // Business Details
  vendorType    VendorType
  specialties   String[]      // STRUCTURAL_STEEL, REBAR, MISC_METALS, etc.
  
  // Performance Tracking
  rating        Float?        // 1-5 stars
  totalOrders   Int           @default(0)
  onTimeRate    Float?        // Percentage of on-time deliveries
  qualityScore  Float?        // Average quality score
  
  // Status
  isActive      Boolean       @default(true)
  isPreferred   Boolean       @default(false)
  
  // Metadata
  notes         String?
  metadata      Json?
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  
  company       Company       @relation(fields: [companyId], references: [id])
  
  @@index([companyId])
  @@index([vendorType])
}

// ================================
// TRAINING & CERTIFICATION MODELS
// ================================

enum CertificationType {
  OSHA_10
  OSHA_30
  CRANE_OPERATOR
  RIGGING
  FALL_PROTECTION
  CONFINED_SPACE
  WELDING_CERTIFICATION
  FIRST_AID_CPR
  SAFETY_TRAINING
  TRADE_SPECIFIC
  COMPANY_ORIENTATION
}

enum CertificationStatus {
  ACTIVE
  EXPIRED
  SUSPENDED
  REVOKED
}

model TrainingRecord {
  id                String              @id @default(uuid())
  userId            String
  
  // Training Details
  certificationType CertificationType
  certificationName String
  issuingOrganization String?
  
  // Dates
  completedDate     DateTime
  expirationDate    DateTime?
  reminderDate      DateTime?         // When to send renewal reminder
  
  // Documentation
  certificateNumber String?
  mediaIds          String[]          // Certificate photos/PDFs
  
  // Verification
  verified          Boolean           @default(false)
  verifiedById      String?
  verifiedAt        DateTime?
  
  // Status
  status            CertificationStatus @default(ACTIVE)
  
  // Metadata
  notes             String?
  metadata          Json?             // Additional training details
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relations
  user              User              @relation(fields: [userId], references: [id])
  verifiedBy        User?             @relation("CertificationVerifier", fields: [verifiedById], references: [id])
  
  @@index([userId])
  @@index([certificationType])
  @@index([expirationDate])
  @@index([status])
}

model TrainingCourse {
  id            String          @id @default(uuid())
  companyId     String
  
  // Course Details
  title         String
  description   String
  category      String          // SAFETY, TECHNICAL, COMPLIANCE, etc.
  duration      Int?            // Duration in minutes
  
  // Content
  modules       Json            // Course modules/lessons
  mediaIds      String[]        // Training videos, documents
  
  // Requirements
  requiredFor   String[]        // User roles that require this training
  prerequisites String[]        // Required courses before this one
  
  // Validity
  isActive      Boolean         @default(true)
  validityPeriod Int?           // Months before renewal required
  
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  
  company       Company         @relation(fields: [companyId], references: [id])
  enrollments   TrainingEnrollment[]
  
  @@index([companyId])
  @@index([category])
}

enum EnrollmentStatus {
  ENROLLED
  IN_PROGRESS
  COMPLETED
  FAILED
  CANCELLED
}

model TrainingEnrollment {
  id            String              @id @default(uuid())
  courseId      String
  userId        String
  
  // Progress
  status        EnrollmentStatus    @default(ENROLLED)
  progress      Float               @default(0) // 0-100 percentage
  
  // Completion
  startedAt     DateTime?
  completedAt   DateTime?
  score         Float?              // Test score if applicable
  
  // Attempts
  attempts      Int                 @default(0)
  maxAttempts   Int                 @default(3)
  
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  course        TrainingCourse      @relation(fields: [courseId], references: [id])
  user          User                @relation(fields: [userId], references: [id])
  
  @@unique([courseId, userId])
  @@index([userId])
  @@index([status])
}

// ================================
// ANALYTICS & PERFORMANCE MODELS
// ================================

model ProjectMetrics {
  id            String      @id @default(uuid())
  projectId     String
  
  // Date for metrics
  date          DateTime    @db.Date
  
  // Safety Metrics
  safetyScore   Float?      // 0-100 safety compliance score
  incidentCount Int         @default(0)
  nearMissCount Int         @default(0)
  daysWithoutIncident Int   @default(0)
  
  // Quality Metrics
  qualityScore    Float?    // 0-100 quality score
  inspectionCount Int       @default(0)
  defectCount     Int       @default(0)
  reworkHours     Float?    // Hours spent on rework
  
  // Progress Metrics
  plannedProgress Float?    // Planned % completion
  actualProgress  Float?    // Actual % completion
  mediaCount      Int       @default(0)
  activityCount   Int       @default(0)
  
  // Team Metrics
  activeUsers       Int     @default(0)
  totalHours        Float?  // Total hours worked
  productivityScore Float?  // Productivity metric
  
  // Supply Chain Metrics
  deliveriesPlanned   Int   @default(0)
  deliveriesOnTime    Int   @default(0)
  materialIssues      Int   @default(0)
  
  // Calculated fields
  efficiencyRatio   Float?  // Actual vs planned progress
  safetyIncidentRate Float? // Incidents per hours worked
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  project         Project   @relation(fields: [projectId], references: [id])
  
  @@unique([projectId, date])
  @@index([projectId])
  @@index([date])
}

model PerformanceBenchmark {
  id            String      @id @default(uuid())
  companyId     String
  
  // Benchmark Details
  name          String
  category      String      // SAFETY, QUALITY, PRODUCTIVITY, etc.
  metric        String      // Specific metric being benchmarked
  
  // Target Values
  targetValue   Float
  minAcceptable Float?
  maxAcceptable Float?
  
  // Industry Standards
  industryAverage Float?
  industryBest    Float?
  
  // Applicability
  projectTypes    String[]  // Which project types this applies to
  isActive        Boolean   @default(true)
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  company       Company     @relation(fields: [companyId], references: [id])
  
  @@index([companyId])
  @@index([category])
}