'use client'

import { useState, useEffect } from 'react'
import { useParams, useRouter } from 'next/navigation'
import { format } from 'date-fns'
import {
  ArrowLeft,
  Download,
  Share2,
  FileText,
  Calendar,
  User,
  MapPin,
  Image as ImageIcon,
  CheckCircle,
  Clock,
  Sparkles,
} from 'lucide-react'
import { Button } from '@/components/Button'
import { useAuth } from '@/contexts/AuthContext'
import { useToast } from '@/components/ui/use-toast'
import { Badge } from '@/components/ui/badge'
import api from '@/lib/api'

interface ReportContent {
  sections?: Array<{
    title: string
    content: any
  }>
  summary?: string
  mediaCount?: number
  dateRange?: {
    start: string
    end: string
  }
  highlights?: Array<{
    photo: string
    highlight: string
  }>
  date?: string
  workCompleted?: Array<{
    time: string
    activity: string
    description: string
    worker: string
    location: string
  }>
  keyAccomplishments?: string[]
}

interface TodoItem {
  task: string
  priority: string
  assignedTo: string | null
}

interface Report {
  id: string
  reportType: 'PROGRESS_RECAP' | 'SUMMARY' | 'DAILY_LOG'
  title: string
  status: 'PENDING' | 'GENERATING' | 'COMPLETED' | 'FAILED'
  content?: ReportContent
  summary?: string
  todoItems?: TodoItem[]
  createdAt: string
  generatedAt?: string
  pdfUrl?: string
  project: {
    id: string
    name: string
    jobNumber: string
    location: string
  }
  user: {
    id: string
    name: string
    email: string
  }
}

export default function ReportViewerPage() {
  const { id: projectId, reportId } = useParams()
  const router = useRouter()
  const { user } = useAuth()
  const { toast } = useToast()
  const [report, setReport] = useState<Report | null>(null)
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchReport()
  }, [reportId])

  const fetchReport = async () => {
    try {
      const response = await api.get(`/api/reports/${reportId}`)
      setReport(response.data.report)
    } catch (error) {
      console.error('Failed to fetch report:', error)
      toast({
        title: 'Error',
        description: 'Failed to load report',
        variant: 'destructive',
      })
      router.push(`/dashboard/projects/${projectId}/reports`)
    } finally {
      setLoading(false)
    }
  }

  const downloadReport = () => {
    if (report?.pdfUrl || report?.status === 'COMPLETED') {
      window.open(`/api/reports/${reportId}/download`, '_blank')
    }
  }

  const shareReport = () => {
    // Navigate to reports page with share dialog open
    router.push(`/dashboard/projects/${projectId}/reports?share=${reportId}`)
  }

  if (loading || !report) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (report.status !== 'COMPLETED') {
    return (
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-2xl mx-auto text-center">
          <Sparkles className="h-16 w-16 text-yellow-500 mx-auto mb-4 animate-pulse" />
          <h1 className="text-2xl font-bold text-white mb-2">
            Report Generating...
          </h1>
          <p className="text-gray-400 mb-8">
            Your report is being generated by AI. This usually takes 30-60
            seconds.
          </p>
          <Button
            variant="outline"
            onClick={() =>
              router.push(`/dashboard/projects/${projectId}/reports`)
            }
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Reports
          </Button>
        </div>
      </div>
    )
  }

  const content = report.content || {}

  return (
    <div className="container mx-auto px-4 py-8 max-w-4xl">
      {/* Header */}
      <div className="mb-8">
        <Button
          variant="ghost"
          onClick={() =>
            router.push(`/dashboard/projects/${projectId}/reports`)
          }
          className="mb-4"
        >
          <ArrowLeft className="h-4 w-4 mr-2" />
          Back to Reports
        </Button>

        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-start justify-between mb-4">
            <div>
              <h1 className="text-2xl font-bold text-white mb-2">
                {report.title}
              </h1>
              <div className="flex items-center gap-4 text-sm text-gray-400">
                <span className="flex items-center gap-1">
                  <Calendar className="h-4 w-4" />
                  {format(
                    new Date(report.generatedAt || report.createdAt),
                    'MMMM d, yyyy'
                  )}
                </span>
                <span className="flex items-center gap-1">
                  <User className="h-4 w-4" />
                  {report.user.name}
                </span>
                <Badge variant="outline">
                  {report.reportType.replace('_', ' ')}
                </Badge>
              </div>
            </div>
            <div className="flex items-center gap-2">
              <Button variant="outline" size="sm" onClick={downloadReport}>
                <Download className="h-4 w-4 mr-2" />
                Download PDF
              </Button>
              <Button variant="outline" size="sm" onClick={shareReport}>
                <Share2 className="h-4 w-4 mr-2" />
                Share
              </Button>
            </div>
          </div>

          {/* Project Info */}
          <div className="border-t pt-4">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
              <div>
                <span className="text-gray-400">Project:</span>
                <p className="text-white font-medium">{report.project.name}</p>
              </div>
              <div>
                <span className="text-gray-400">Job Number:</span>
                <p className="text-white font-medium">
                  #{report.project.jobNumber}
                </p>
              </div>
              <div>
                <span className="text-gray-400">Location:</span>
                <p className="text-white font-medium flex items-center gap-1">
                  <MapPin className="h-3 w-3" />
                  {report.project.location}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Report Content */}
      <div className="space-y-8">
        {/* Summary */}
        {report.summary && (
          <div className="bg-gray-800 rounded-lg p-6">
            <h2 className="text-lg font-semibold text-white mb-3">Summary</h2>
            <p className="text-gray-300">{report.summary}</p>
          </div>
        )}

        {/* Progress Recap Sections */}
        {report.reportType === 'PROGRESS_RECAP' &&
          content.sections?.map((section, index) => (
            <div key={index} className="bg-gray-800 rounded-lg p-6">
              <h2 className="text-lg font-semibold text-white mb-4">
                {section.title}
              </h2>
              {renderSectionContent(section)}
            </div>
          ))}

        {/* Summary Report Content */}
        {report.reportType === 'SUMMARY' && (
          <>
            {content.highlights && content.highlights.length > 0 && (
              <div className="bg-gray-800 rounded-lg p-6">
                <h2 className="text-lg font-semibold text-white mb-4">
                  Highlights
                </h2>
                <div className="space-y-3">
                  {content.highlights.map((highlight, index) => (
                    <div
                      key={index}
                      className="border-l-4 border-safety-orange pl-4"
                    >
                      <p className="text-gray-300">{highlight.highlight}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        )}

        {/* Daily Log Content */}
        {report.reportType === 'DAILY_LOG' && (
          <>
            {content.workCompleted && content.workCompleted.length > 0 && (
              <div className="bg-gray-800 rounded-lg p-6">
                <h2 className="text-lg font-semibold text-white mb-4">
                  Work Completed Today
                </h2>
                <div className="space-y-4">
                  {content.workCompleted.map((work, index) => (
                    <div
                      key={index}
                      className="border-l-2 border-gray-600 pl-4"
                    >
                      <div className="flex items-start justify-between">
                        <div>
                          <p className="text-white font-medium">
                            {work.activity}
                          </p>
                          <p className="text-gray-300 text-sm mt-1">
                            {work.description}
                          </p>
                          <div className="flex items-center gap-4 mt-2 text-xs text-gray-400">
                            <span className="flex items-center gap-1">
                              <Clock className="h-3 w-3" />
                              {work.time}
                            </span>
                            <span className="flex items-center gap-1">
                              <User className="h-3 w-3" />
                              {work.worker}
                            </span>
                            {work.location && (
                              <span className="flex items-center gap-1">
                                <MapPin className="h-3 w-3" />
                                {work.location}
                              </span>
                            )}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}

            {report.todoItems && report.todoItems.length > 0 && (
              <div className="bg-gray-800 rounded-lg p-6">
                <h2 className="text-lg font-semibold text-white mb-4">
                  Tomorrow&apos;s Action Items
                </h2>
                <div className="space-y-3">
                  {report.todoItems.map((todo, index) => (
                    <div key={index} className="flex items-start gap-3">
                      <CheckCircle className="h-5 w-5 text-gray-500 mt-0.5" />
                      <div className="flex-1">
                        <p className="text-white">{todo.task}</p>
                        <div className="flex items-center gap-3 mt-1 text-sm">
                          <Badge
                            variant="outline"
                            className={
                              todo.priority === 'high'
                                ? 'border-red-500 text-red-500'
                                : todo.priority === 'medium'
                                  ? 'border-yellow-500 text-yellow-500'
                                  : 'border-gray-500 text-gray-500'
                            }
                          >
                            {todo.priority}
                          </Badge>
                          {todo.assignedTo && (
                            <span className="text-gray-400">
                              Assigned to: {todo.assignedTo}
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </div>
  )
}

// Helper function to render section content based on type
function renderSectionContent(section: any) {
  const { content } = section

  // Project Overview
  if (section.title === 'Project Overview') {
    return (
      <div className="grid grid-cols-2 gap-4 text-sm">
        <div>
          <span className="text-gray-400">Total Photos:</span>
          <p className="text-white font-medium">{content.totalPhotos}</p>
        </div>
        <div>
          <span className="text-gray-400">Total Activities:</span>
          <p className="text-white font-medium">{content.totalActivities}</p>
        </div>
        {content.dateRange && (
          <>
            <div>
              <span className="text-gray-400">Start Date:</span>
              <p className="text-white font-medium">
                {format(new Date(content.dateRange.start), 'MMM d, yyyy')}
              </p>
            </div>
            <div>
              <span className="text-gray-400">End Date:</span>
              <p className="text-white font-medium">
                {format(new Date(content.dateRange.end), 'MMM d, yyyy')}
              </p>
            </div>
          </>
        )}
      </div>
    )
  }

  // Work Completed
  if (section.title === 'Work Completed') {
    return (
      <div className="space-y-4">
        {content.map((dateGroup: any, index: number) => (
          <div key={index}>
            <h3 className="text-white font-medium mb-2">
              {format(new Date(dateGroup.date), 'EEEE, MMMM d')}
            </h3>
            <div className="space-y-2">
              {dateGroup.activities.map((activity: any, actIndex: number) => (
                <div
                  key={actIndex}
                  className="text-sm text-gray-300 pl-4 border-l-2 border-gray-600"
                >
                  <span className="font-medium">{activity.type}:</span>{' '}
                  {activity.description}
                  <div className="text-xs text-gray-400 mt-1">
                    By {activity.user}{' '}
                    {activity.location && `at ${activity.location}`}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    )
  }

  // Photo Documentation
  if (section.title === 'Photo Documentation') {
    return (
      <div className="space-y-4">
        {Object.entries(content).map(([category, photos]: [string, any]) => (
          <div key={category}>
            <h3 className="text-white font-medium mb-2">{category}</h3>
            <div className="text-sm text-gray-300">
              {photos.length} photo{photos.length !== 1 ? 's' : ''} in this
              category
            </div>
          </div>
        ))}
      </div>
    )
  }

  // Key Observations
  if (section.title === 'Key Observations') {
    return (
      <ul className="space-y-2">
        {content.map((observation: string, index: number) => (
          <li key={index} className="text-gray-300 flex items-start gap-2">
            <span className="text-safety-orange">•</span>
            {observation}
          </li>
        ))}
      </ul>
    )
  }

  // Default rendering for unknown content types
  return (
    <pre className="text-gray-300 text-sm">
      {JSON.stringify(content, null, 2)}
    </pre>
  )
}
